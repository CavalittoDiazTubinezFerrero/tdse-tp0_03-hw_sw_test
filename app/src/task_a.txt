Análisis y descripción del código fuente de task_a.c
1. TIPOS DE DATOS
    - uint32_t: Entero sin signo de 32 bits (usado en contadores y variables de control)
    - char: Para caracteres (usado en el puntero a string)
    - void: Para funciones que no retornan valor y punteros genéricos
    - const char *: Puntero a cadena de caracteres constante

2. ESTRUCTURAS DE DATOS
    - No se definen estructuras de datos en task_a.c

3. ARRAY DE ESTRUCTURAS DE DATOS
    - No se definen arrays de estructuras en el codigo task_a.c

4. MÉTODOS Y FUNCIONES
    - void task_a_init(void *parameters) : Inicialización de la tarea
    - void task_a_update(void *parameters) :  Actualización/ejecución de la tarea
    - LOGGER_INFO(): Para logging/registro de información
    - HAL_Delay(): Para generar delays/retardos
    - GET_NAME(): Macro para obtener nombres de variables

5. PATRONES DE DISEÑO DE SOFTWARE
    5.1:Task Pattern (Patrón de Tareas):
        -Separación clara entre inicialización (task_a_init) y ejecución (task_a_update)
         Estructura típica de sistemas de tiempo real

    5.2:Strategy Pattern (parcial):
        -Uso de compilación condicional (#if TEST_X == TEST_0/1/2) para diferentes comportamientos
         Permite cambiar la estrategia de ejecución en tiempo de compilación

    5.3:Singleton Pattern (implícito):
        -Variable global g_task_a_cnt sugiere una instancia única de la tarea

    5.4:Observer Pattern (implícito):
        -El sistema de logging (LOGGER_INFO) actúa como observador del estado de la tarea